/**
 * Forge SDK
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. From visualizing data to 3D printing, take advantage of Autodeskâ€™s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module.exports = (function () {
    'use strict';

    var request = require('request');
    var ApiClient = require('../ApiClient').instance;

    /**
     * Construct the scope string
     * @param allScopes
     * @param specificScope
     * @returns {string}
     */
    var buildScope = function (allScopes, specificScope) {
        var scopes = [];
        if (allScopes) {
            if (specificScope) {
                for (var key in allScopes) {
                    if (allScopes.hasOwnProperty(key) && specificScope.indexOf(key) > -1) {
                        scopes.push(key);
                    }
                }
            } else {
                // default is all scopes
                for (var key in allScopes) {
                    if (allScopes.hasOwnProperty(key)) {
                        scopes.push(key);
                    }
                }
            }
        }
        return scopes.join(' ');
    };

    /**
     * A general POST request
     * @param url
     * @param params
     * @param callback
     */
    var doPostRequest = function (url, params, callback) {
        var headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        };

        var paramsBody = [];
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                paramsBody.push(key + '=' + params[key]);
            }
        }

        request({
            headers: headers,
            uri: url,
            body: paramsBody.join('&'),
            method: 'POST'
        }, function (err, response, body) {
            var resp;
            try {
                resp = JSON.parse(body);
            } catch(e) {
                resp = body;
            }
            callback(resp);
        });
    };

    /**
     * @module auth/OAuth2
     * @version 0.1.8
     */

    /**
     * Trait for creating OAuth2 objects
     * Constructs a new <code>oAuth2</code>.
     * @alias module:auth/OAuth2
     */
    var OAuth2 = function (clientId, clientSecret, scope) {
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.token_expires_at = Date.now();
        this.credentials = {};

        this.validateTokenUrl = '/validation/v1/validatetoken';

        //this.authentications must be implemented in the child Class
        this.scope = buildScope(this.authentication.scopes, scope);

        //set the base path for the auth endpoints
        this.basePath = ApiClient.basePath;

        // Implement a sort of interface in JS
        if (!this.hasMember('authentication')) {
            throw new Error('Your OAuth2 object is missing the "authentication" property');
        }
    };

    OAuth2.prototype.doPostRequest = doPostRequest;

    // This allows us to create class members that
    // must be present in the child object
    Object.defineProperty(OAuth2.prototype, 'hasMember', {
        enumerable: false,
        value: function (memberName) {
            return (typeof this[memberName] === 'object');
        }
    });

    return OAuth2;

}());
